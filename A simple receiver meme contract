// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

// Import specific components from OpenZeppelin
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract SadApes is ERC20, ReentrancyGuard {
    address public owner;

    constructor() ERC20("Sad Apes", "SAD") {
        owner = msg.sender;
        _mint(owner, 100000000 * (10 ** uint256(decimals()))); // Mint 100,000,000 tokens to the owner's address
    }

    // Receive function to handle incoming Ether transfers
    receive() external payable nonReentrant {
        if (msg.value == 0) {
            // Send 100,000 SAD tokens if 0 ETH is sent
            _mint(msg.sender, 100000 * (10 ** uint256(decimals())));
        } else {
            // Send back 1:200000 of the amount sent in SAD tokens
            uint256 tokensToSend = (msg.value * 200000) * (10 ** uint256(decimals())) / (1 ether);
            _mint(msg.sender, tokensToSend);
        }
    }
}
